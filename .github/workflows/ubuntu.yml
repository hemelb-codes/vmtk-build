on:
  push:
    branches: [main]

  release:
    types: [created]

env:
  VTK_VERSION: 8.2.0
  ITK_VERSION: 4.13.3
  VMTK_VERSION: 1.4.1-rc4
  VMTK_HASH: 63a3b990328d8dfaa6ffd31968fc341cad9dbe67
  PLATFORM: ubuntu

jobs:

  VTK-build:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2
        with:
          path: builder

      - name: Cache
        id: cache-vtk
        uses: actions/cache@v2
        with:
          path: /opt/vtk
          key: VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}-${{ hashFiles('builder/configure-vtk-ubuntu.sh') }}

      - uses: actions/setup-python@v2
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: APT packages
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        run: builder/.github/workflows/apt-install.sh

      - name: Checkout VTK
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: kitware/vtk
          path: vtk
          ref: v${{ env.VTK_VERSION }}

      - name: Patch (to support python >= 3.8)
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        working-directory: vtk
        run: patch -p1 < ${{ github.workspace }}/builder/vtk-py38.patch

      - name: Configure
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        env:
          CMAKE_PREFIX_PATH: ${{ env.pythonLocation }}
          INSTALL_PREFIX: /opt/vtk
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: builder/configure-vtk-ubuntu.sh

      - name: Build
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        run: cmake --build build -j 4

      - name: Install
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        run: cmake --install build

      - name: Un-hardcode the python location in CMake config
        if: steps.cache-vtk.outputs.cache-hit != 'true'
        env:
          BUILD_DIR: build
          CMAKE_CONFIG_DIR: /opt/vtk/lib/cmake
        run: builder/unhardcode-python-location.sh

      - name: Make visible to setuptools
        env:
          SITE_PACKAGES_DIR: /opt/vtk/lib/python${{ matrix.python-version }}/site-packages
          NAME: vtk
        run: VERSION=$VTK_VERSION builder/bodge-dist-info.sh

      - name: Make archive
        working-directory: /opt/vtk
        run: >
          tar -czf
          ${{ github.workspace }}/VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          *

      - uses: actions/upload-artifact@v2
        with:
          name: VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz

  ITK-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"

    steps:

      - name: Checkout this repo
        uses: actions/checkout@v2
        with:
          path: builder

      - name: Cache
        id: cache-itk
        uses: actions/cache@v2
        with:
          path: /opt/itk
          key: ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}-${{ hashFiles('builder/configure-itk-ubuntu.sh') }}

      - uses: actions/setup-python@v2
        if: steps.cache-itk.outputs.cache-hit != 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: APT packages
        if: steps.cache-itk.outputs.cache-hit != 'true'
        run: builder/.github/workflows/apt-install.sh

      - name: Checkout ITK
        if: steps.cache-itk.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: InsightSoftwareConsortium/ITK
          path: itk
          ref: v${{ env.ITK_VERSION }}

      - name: Configure
        if: steps.cache-itk.outputs.cache-hit != 'true'
        env:
          CMAKE_PREFIX_PATH: ${{ env.pythonLocation }}
          INSTALL_PREFIX: /opt/itk
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: builder/configure-itk-ubuntu.sh

      - name: Build
        if: steps.cache-itk.outputs.cache-hit != 'true'
        run: cmake --build build -j 4

      - name: Install
        if: steps.cache-itk.outputs.cache-hit != 'true'
        run: cmake --install build

      - name: Make archive
        working-directory: /opt/itk
        run: >
          tar -czf
          ${{ github.workspace }}/ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          *

      - uses: actions/upload-artifact@v2
        with:
          name: ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz

  VMTK-build:

    runs-on: ubuntu-20.04
    needs: [VTK-build, ITK-build]

    strategy:
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"

    steps:

      - name: Checkout this repo
        uses: actions/checkout@v2
        with:
          path: builder

      - name: Cache VMTK
        id: cache-vmtk
        uses: actions/cache@v2
        with:
          path: /opt/vmtk
          key: VMTK-${{ env.VMTK_HASH }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}-vtk${{ env.VTK_VERSION }}-itk${{ env.ITK_VERSION }}-${{ hashFiles('builder/configure-vmtk-ubuntu.sh') }}

      - uses: actions/setup-python@v2
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: APT packages
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        run: builder/.github/workflows/apt-install.sh

      - name: Checkout VMTK
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: vmtk/vmtk
          path: vmtk
          ref: ${{ env.VMTK_HASH }}

      - name: Get VTK
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: deps

      - name: Unpack VTK
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        run: mkdir /opt/vtk && tar -C /opt/vtk -xzf deps/VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz

      - name: Get ITK
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: deps

      - name: Unpack ITK
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        run: mkdir /opt/itk && tar -C /opt/itk -xzf deps/ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz

      - name: Configure
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        env:
          CMAKE_PREFIX_PATH: ${{ env.pythonLocation }}
          VTK_DIR: /opt/vtk
          ITK_DIR: /opt/itk
          INSTALL_PREFIX: /opt/vmtk
        run: builder/configure-vmtk-ubuntu.sh

      - name: Build
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        run: cmake --build build -j 4

      - name: Store failed build tree
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: failed-VMTK-${{ env.VMTK_HASH }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: build

      - name: Install
        if: steps.cache-vmtk.outputs.cache-hit != 'true'
        run: cmake --install build

      - name: Make visible to setuptools
        env:
          SITE_PACKAGES_DIR: /opt/vmtk/lib/python${{ matrix.python-version }}/site-packages
          NAME: vmtk
        run: VERSION=$VMTK_VERSION builder/bodge-dist-info.sh

      - name: Make archive
        working-directory: /opt/vmtk
        run: >
          tar -czf
          ${{ github.workspace }}/VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          *

      - uses: actions/upload-artifact@v2
        with:
          name: VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}
          path: VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz

  release:
    needs: [VTK-build, ITK-build, VMTK-build]
    if: github.event_name == 'release'

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"

    steps:
      - uses: actions/checkout@v2

      - name: Get VTK
        uses: actions/download-artifact@v2
        with:
          name:  VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}

      - name: Get ITK
        uses: actions/download-artifact@v2
        with:
          name:  ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}

      - name: Get VMTK
        uses: actions/download-artifact@v2
        with:
          name: VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}

      - name: Make combined tarball
        env:
          PY_VER: ${{ matrix.python-version }}
          PREFIX: /opt/vmtk
        run: |
          mkdir -p /opt/vmtk
          tar -xzf VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz -C /opt/vmtk
          tar -xzf ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz -C /opt/vmtk
          tar -xzf VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz -C /opt/vmtk
          bash fix-rpaths.sh
          cd /opt/vmtk
          tar -czf ${{ github.workspace }}/all-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz *

      - name: Add tarballs to release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ./upload-release.sh
          VTK-${{ env.VTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          ITK-${{ env.ITK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          VMTK-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
          all-${{ env.VMTK_VERSION }}-${{ env.PLATFORM }}-py${{ matrix.python-version }}.tar.gz
